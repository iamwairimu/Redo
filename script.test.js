// Generated by CodiumAI

describe("setMusic", () => {
  // sets the music source to the correct path
  it("should set the music source to the correct path when a valid index is provided", () => {
    document.body.innerHTML = `
        <audio id="audio"></audio>
        <div class="song-name"></div>
        <div class="artist-name"></div>
        <div class="square"></div>
        <div class="now"></div>
        <div class="period"></div>
        <input type="range" class="bar" />
      `;
    const theMusic = [
      {
        path: "song1.mp3",
        name: "Song 1",
        artist: "Artist 1",
        cover: "cover1.jpg",
      },
      {
        path: "song2.mp3",
        name: "Song 2",
        artist: "Artist 2",
        cover: "cover2.jpg",
      },
    ];
    global.theMusic = theMusic;
    const music = document.querySelector("#audio");
    const songName = document.querySelector(".song-name");
    const artistName = document.querySelector(".artist-name");
    const square = document.querySelector(".square");
    const now = document.querySelector(".now");
    const period = document.querySelector(".period");
    const bar = document.querySelector(".bar");

    setMusic(1);

    expect(music.src).toContain(theMusic[1].path);
    expect(songName.innerHTML).toBe(theMusic[1].name);
    expect(artistName.innerHTML).toBe(theMusic[1].artist);
    expect(square.style.backgroundImage).toBe(`url('${theMusic[1].cover}')`);
  });

  // updates the song name correctly
  it("should update the song name correctly", () => {
    const theMusic = [
      {
        path: "song1.mp3",
        name: "Song 1",
        artist: "Artist 1",
        cover: "cover1.jpg",
      },
      {
        path: "song2.mp3",
        name: "Song 2",
        artist: "Artist 2",
        cover: "cover2.jpg",
      },
    ];
    global.theMusic = theMusic;
    const music = document.querySelector("#audio");
    const songName = document.querySelector(".song-name");
    const artistName = document.querySelector(".artist-name");
    const square = document.querySelector(".square");
    const now = document.querySelector(".now");
    const period = document.querySelector(".period");
    const bar = document.querySelector(".bar");

    setMusic(1);

    expect(songName.innerHTML).toBe(theMusic[1].name);
  });

  // handles an empty or null song list
  it("should handle an empty or null song list without errors", () => {
    document.body.innerHTML = `
        <audio id="audio"></audio>
        <div class="song-name"></div>
        <div class="artist-name"></div>
        <div class="square"></div>
        <div class="now"></div>
        <div class="period"></div>
        <input type="range" class="bar" />
      `;
    global.theMusic = [];
    const music = document.querySelector("#audio");
    const songName = document.querySelector(".song-name");
    const artistName = document.querySelector(".artist-name");
    const square = document.querySelector(".square");
    const now = document.querySelector(".now");
    const period = document.querySelector(".period");
    const bar = document.querySelector(".bar");

    expect(() => setMusic(0)).not.toThrow();
  });
});

// correctly formats time less than a minute
it("should format time correctly when time is less than a minute", () => {
  const time = 45; // 45 seconds
  const formattedTime = formatTime(time);
  expect(formattedTime).toBe("00:45");
});

// handles zero seconds input
it("should format time correctly when time is zero seconds", () => {
  const time = 0; // 0 seconds
  const formattedTime = formatTime(time);
  expect(formattedTime).toBe("00:00");
});

// music element starts playing when playMusic is called
it("should start playing music when playMusic is called", () => {
  document.body.innerHTML = `
        <audio id="audio"></audio>
        <button class="play"></button>
      `;
  const music = document.querySelector("#audio");
  const play = document.querySelector(".play");
  music.play = jest.fn();

  playMusic();

  expect(music.play).toHaveBeenCalled();
});

// playMusic is called when music is already playing
it("should continue playing music when playMusic is called while music is already playing", () => {
  document.body.innerHTML = `
        <audio id="audio"></audio>
        <button class="play pause"></button>
      `;
  const music = document.querySelector("#audio");
  const play = document.querySelector(".play");
  music.play = jest.fn();

  playMusic();

  expect(music.play).toHaveBeenCalled();
});
